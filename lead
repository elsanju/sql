################################### LEAD Function ###################################

# Using the LEAD() function, from the current row, you can access data of the next row, or the row after the next row, and so on. The LEAD() function can be very useful for comparing the value of the current row with the value of the following row.

# -> The following shows the syntax of the LEAD() function:


LEAD(return_value ,offset [,default]) 
OVER (
    [PARTITION BY partition_expression, ... ]
    ORDER BY sort_expression [ASC | DESC], ...
)

# Example:

SELECT customer_id 
      , LEAD (updated_at,1) OVER (PARTITION BY customer_id ORDER BY updated_at) 
FROM table 


# return_value
# The return value of the following row based on a specified offset. The return value must evaluate to a single value and cannot be another window function.

# offset
# offset is the number of rows forward from the current row from which to access data. The offset can be an expression, subquery, or column that evaluates to a positive integer.

# The default value of offset is 1 if you donâ€™t specify it explicitly.

# default
# The function returns default if offset goes beyond the scope of the partition. If not specified, it defaults to NULL.

# PARTITION BY clause
# The PARTITION BY clause distributes rows of the result set into partitions to which the LEAD() function is applied.
# If you do not specify the PARTITION BY clause, the function treats the whole result set as a single partition.

# ORDER BY clause
# The ORDER BY clause specify logical order of the rows in each partition to which the LEAD() function is applied.
